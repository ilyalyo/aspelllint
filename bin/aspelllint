#!/usr/bin/env ruby

require 'rubygems'
require 'find'
require 'optparse'
require 'yaml'
require 'aspelllint'

IGNORE_FILENAME = '.aspelllintignore'

def main
  ignores = DEFAULT_IGNORES

  filenames = []

  option = OptionParser.new do |option|
    option.banner = 'Usage: aspelllint [options] [<files>|-]'

    option.on('-i', '--ignore pattern', 'Ignore file names matching Ruby regex pattern') do |pattern|
      ignores << pattern
    end

    option.on('-h', '--help', 'Print usage info') do
      puts option
      exit
    end

    option.on('-v', '--version', 'Print version info') do
      puts "aspelllint #{Aspelllint::VERSION}"
      exit
    end
  end

  option.parse!

  filenames = ARGV unless ARGV.empty?

  if filenames.empty? || filenames == ['-'] then
    check_stdin
  else
    recursive_filenames = []

    filenames.each do |f|
      if File.directory? f
        recursive_filenames = recursive_filenames.concat(recursive_list(f, ignores))
      else
        recursive_filenames << f
      end
    end

    recursive_filenames.each do |f|
      dir = File.expand_path("..", f)

      parent_of_home = File.expand_path("..", ENV["HOME"])

      while dir != parent_of_home
        ignore_file = dir + File::SEPARATOR + IGNORE_FILENAME

        if File.exist?(ignore_file) then
          ignores.concat(open(ignore_file).read.split("\n"))
        end

        dir = File.expand_path("..", dir)
      end

      if ignores.none? { |ignore| f =~ %r(#{ignore}) } then
        check(f)
      end
    end
  end
end

begin
  main

#
# User quits aspelllint before completion.
#

rescue Interrupt
  nil
#
# Invalid byte sequence in UTF-8 file.
# Likely a false positive text file.
#
rescue ArgumentError
  nil
#
# aspelllint piped to another program (e.g. `less`),
# which is quit before aspelllint completes.
#
rescue Errno::EPIPE, Errno::EMFILE
  nil
end
